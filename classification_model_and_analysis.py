# -*- coding: utf-8 -*-
"""Classification Model and Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/classification-model-and-analysis-3f790ac4-ef7f-4ae7-8afb-f4c307a6e68f.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240921/auto/storage/goog4_request%26X-Goog-Date%3D20240921T162153Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D374567112ad88d6f1469fb45910aa363105e1ea1fa4195b8434b44ad95e50991ff1a0c6f17033c3f0c5202c10c31d34f343d780fab08bd3780fb7a6ec9873dc0248970bbaee4644906d3c97c9f08325f93bac4af9c1b60850998c80e8369f33dbbc05a04e6855975a8e2d5d4ff94ef99ba83d90e9abf5ab2fc887d549312afc0b94154a29c8fc0bfc7d46e4a7f893d03af1cae5fe28a964b8d1de62ca12e0283da6e89f9c8ed93e08fa2f84a5bf0866d3033aef6f76231cfac38ca3f6c62265b8038b63ea2a70e04a6c2b510ddaee76d6656fdef1144f6cf941b13753582bdfadd3bfc2d266a23f858581cd23d8bad8d0de70de82e906dff64fa70b228754614
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report

df=pd.read_csv("/kaggle/input/test-file/tested.csv")

df.head(10)

df.info()

df.isna().sum()

df.duplicated().sum()

df.describe()

"""# Handling Missing Values

"""

df=df.drop(columns="Cabin")
df

df["Age"].fillna(df["Age"].mean(),inplace=True)
df["Age"].isna().sum()

df.isna().sum()

df["Fare"].fillna(df["Fare"].median(),inplace=True)
df["Fare"].isna().sum()

df.isna().sum()

"""# #Data Analysis"""

Survived=df["Survived"].value_counts()
Survived

plt.figure(figsize=(10,6))
plt.title(" Survived People In Titanic",fontdict={"fontname":"Comic Sans MS","fontsize":18},color="Red")
plt.bar(Survived.index,Survived.values,width=0.5,color=["red","blue"],label=["Not Survived","Survived"])
plt.legend(loc="best",title="Key")
plt.xticks(np.arange(0,2,1))
plt.show()

Class=df["Pclass"].value_counts()
Class

plt.figure(figsize=(8,6))
plt.title(" Class of  People In Titanic",fontdict={"fontname":"Comic Sans MS","fontsize":18},color="Red")
plt.bar(Class.index,Class.values,width=0.4,color=["red","blue","gold"],label=["Class 3","Class 1","Class 2"])
plt.legend(loc="best",title="Key")
plt.xticks(np.arange(1,4,1))
plt.show()

sex=df["Sex"].value_counts()
sex

plt.figure(figsize=(8,6))
plt.title(" Gender of  People In Titanic",fontdict={"fontname":"Comic Sans MS","fontsize":18},color="Red")
plt.bar(sex.index,sex.values,width=0.4,color=["blue","orange"],label=["Male","Female"])
plt.legend(loc="best",title="Sex")
plt.xticks(np.arange(0,2,1))
plt.show()

df["Age"].describe()

sns.histplot(df["Age"])

df["SibSp"].value_counts()

sns.histplot(df["SibSp"])

df["Parch"].value_counts()

sns.histplot(df["Parch"])

df["Fare"].describe()

sns.scatterplot(df["Fare"])

Embark=df["Embarked"].value_counts()
Embark

plt.figure(figsize=(8,6))
plt.title(" Embarked Type In Titanic",fontdict={"fontname":"Comic Sans MS","fontsize":18},color="Red")
plt.bar(Embark.index,Embark.values,width=0.4,color=["green","blue","gold"],label=["Embark S","Embark C ","Embark Q"])
plt.legend(loc="best")
plt.xticks(np.arange(0,4,1))
plt.show()

S_S=df.groupby("Survived")["Sex"].value_counts()
S_S

S_A=df.groupby("Survived")["Age"].describe()
S_A

S_C=df.groupby(["Survived"])["Pclass"].value_counts()
S_C

plt.figure(figsize=(10,6))
corr=df.corr(numeric_only=True)
corr=corr.drop(columns="PassengerId")
sns.heatmap(corr,annot=True)
plt.show()

sns.pairplot(df)

df.drop(['Ticket', 'Name', 'PassengerId'], axis=1, inplace=True)

df

"""# Logistics Regression Model"""

df = pd.get_dummies(df, drop_first=True)

x = df.drop('Survived', axis=1)
y = df['Survived']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

Scale=StandardScaler()
x_train=Scale.fit_transform(x_train)
x_test=Scale.fit_transform(x_test)

model=LogisticRegression()

model.fit(x_train,y_train)

y_predict=model.predict(x_test)

"""# Evaluate the model

"""

print("Accuracy ",accuracy_score(y_test,y_predict))
print("Confusion Matrix : \n",confusion_matrix(y_test,y_predict))
print("Classification Report",classification_report(y_test,y_predict))

